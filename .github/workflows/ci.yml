name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  # Build and test on multiple platforms
  build-and-test:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release, Debug]
        exclude:
          # Skip Debug builds on Windows to reduce CI time
          - os: windows-latest
            build_type: Debug
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y nlohmann-json3-dev cmake build-essential libcurl4-openssl-dev
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew uninstall cmake
        brew install cpr nlohmann-json cmake
    
    - name: Install Chocolatey and dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install Chocolatey
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        
        # Install build tools
        choco install -y cmake --no-progress
        
        # Setup vcpkg
        git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
        C:\vcpkg\bootstrap-vcpkg.bat -disableMetrics
        C:\vcpkg\vcpkg.exe integrate install
        
        # Install all dependencies via vcpkg
        C:\vcpkg\vcpkg.exe install cpr nlohmann-json --triplet x64-windows
      shell: powershell
    
    - name: Configure CMake (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Configure CMake with vcpkg toolchain
        cmake -S . -B build `
          -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake `
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
          -DCMAKE_PREFIX_PATH="C:/vcpkg/installed/x64-windows"
      shell: powershell
    
    - name: Build (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: cmake --build build --config ${{ matrix.build_type }}
    
    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: cmake --build build --config ${{ matrix.build_type }}
      shell: cmd
    
    - name: Run preflight checks (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: make preflight
    
    - name: Run preflight checks (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        REM Run preflight checks using CMake
        cmake --build build --target preflight --config ${{ matrix.build_type }}
      shell: cmd
      continue-on-error: true
    
    - name: Upload build artifacts (Linux/macOS)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: llamaware-agent-${{ matrix.os }}-${{ matrix.build_type }}
        path: build/bin/llamaware-agent*
    
    - name: Upload build artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: llamaware-agent-${{ matrix.os }}-${{ matrix.build_type }}
        path: build/bin/Release/llamaware-agent.exe

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Run E2E Tests
      run: |
        docker-compose -f docker-compose.e2e.yml up --abort-on-container-exit --exit-code-from e2e-tests

    - name: Upload E2E test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-logs
        path: tests/e2e/e2e_test.log
