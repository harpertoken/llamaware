name: Release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build & Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release]
        exclude:
          - os: windows-latest
            build_type: Debug
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y nlohmann-json3-dev cmake build-essential libcurl4-openssl-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew uninstall cmake || true
          brew install cmake nlohmann-json cpr

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          choco install -y cmake --no-progress
          git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat -disableMetrics
          C:\vcpkg\vcpkg.exe integrate install
          C:\vcpkg\vcpkg.exe install cpr nlohmann-json --triplet x64-windows

      - name: Configure CMake (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          cmake -S . -B build `
            -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake `
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
            -DCMAKE_PREFIX_PATH="C:/vcpkg/installed/x64-windows"

      - name: Build
        if: matrix.os != 'windows-latest'
        run: cmake --build build --config ${{ matrix.build_type }}

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: cmake --build build --config ${{ matrix.build_type }}

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/bin/llamaware-agent*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}